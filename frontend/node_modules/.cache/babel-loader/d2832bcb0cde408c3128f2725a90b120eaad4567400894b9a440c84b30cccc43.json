{"ast":null,"code":"var _jsxFileName = \"/frontend/src/context/WebSocketContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { io } from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebSocketContext = /*#__PURE__*/createContext(undefined);\nexport const WebSocketProvider = ({\n  children\n}) => {\n  _s();\n  const [socket, setSocket] = useState(null);\n  const connect = () => {\n    return new Promise((resolve, reject) => {\n      if (socket !== null && socket !== void 0 && socket.connected) {\n        resolve(socket); // If already connected, resolve immediately\n        return;\n      }\n      const newSocket = io(\"http://localhost:8000\");\n      setSocket(newSocket); // Set the socket in state\n\n      newSocket.on(\"connect\", () => {\n        console.log(\"Socket connected!\");\n        resolve(newSocket); // Resolve when connected\n      });\n      newSocket.on(\"connect_error\", err => {\n        console.error(\"Socket connection error:\", err);\n        reject(err); // Reject on connection error\n      });\n    });\n  };\n  const emit = (event, data, callback) => {\n    if (socket) {\n      socket.emit(event, data, callback);\n    } else {\n      console.error(\"Socket not connected.\");\n    }\n  };\n  const disconnect = () => {\n    if (socket) {\n      socket.disconnect();\n      setSocket(null);\n    }\n  };\n  useEffect(() => {\n    // Cleanup socket on unmount\n    return () => {\n      disconnect();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(WebSocketContext.Provider, {\n    value: {\n      socket,\n      connect,\n      emit,\n      disconnect\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n_s(WebSocketProvider, \"NvwYO9vJOwIMt5STdlMKfWhuxZw=\");\n_c = WebSocketProvider;\nexport const useWebSocket = () => {\n  _s2();\n  const context = useContext(WebSocketContext);\n  if (!context) {\n    throw new Error(\"useWebSocket must be used within a WebSocketProvider\");\n  }\n  return context;\n};\n_s2(useWebSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"WebSocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","io","jsxDEV","_jsxDEV","WebSocketContext","undefined","WebSocketProvider","children","_s","socket","setSocket","connect","Promise","resolve","reject","connected","newSocket","on","console","log","err","error","emit","event","data","callback","disconnect","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useWebSocket","_s2","context","Error","$RefreshReg$"],"sources":["/frontend/src/context/WebSocketContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { io, Socket } from \"socket.io-client\";\n\ninterface WebSocketContextType {\n    socket: Socket | null;\n    connect: () => Promise<Socket>;\n    emit: (event: string, data: Record<string, unknown>, callback?: (response: any) => void) => void;\n    disconnect: () => void;\n}\n\nconst WebSocketContext = createContext<WebSocketContextType | undefined>(undefined);\n\nexport const WebSocketProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n    const [socket, setSocket] = useState<Socket | null>(null);\n\n    const connect = (): Promise<Socket> => {\n        return new Promise((resolve, reject) => {\n            if (socket?.connected) {\n                resolve(socket); // If already connected, resolve immediately\n                return;\n            }\n    \n            const newSocket = io(\"http://localhost:8000\");\n            setSocket(newSocket); // Set the socket in state\n    \n            newSocket.on(\"connect\", () => {\n                console.log(\"Socket connected!\");\n                resolve(newSocket); // Resolve when connected\n            });\n    \n            newSocket.on(\"connect_error\", (err) => {\n                console.error(\"Socket connection error:\", err);\n                reject(err); // Reject on connection error\n            });\n        });\n    };\n\n    const emit = (event: string, data: Record<string, unknown>, callback?: (response: any) => void) => {\n        if (socket) {\n            socket.emit(event, data, callback);\n        } else {\n            console.error(\"Socket not connected.\");\n        }\n    };\n\n    const disconnect = () => {\n        if (socket) {\n            socket.disconnect();\n            setSocket(null);\n        }\n    };\n\n    useEffect(() => {\n        // Cleanup socket on unmount\n        return () => {\n            disconnect();\n        };\n    }, []);\n\n    return (\n        <WebSocketContext.Provider value={{ socket, connect, emit, disconnect }}>\n            {children}\n        </WebSocketContext.Provider>\n    );\n};\n\nexport const useWebSocket = (): WebSocketContextType => {\n    const context = useContext(WebSocketContext);\n    if (!context) {\n        throw new Error(\"useWebSocket must be used within a WebSocketProvider\");\n    }\n    return context;\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,EAAE,QAAgB,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAS9C,MAAMC,gBAAgB,gBAAGP,aAAa,CAAmCQ,SAAS,CAAC;AAEnF,OAAO,MAAMC,iBAA0D,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACxF,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAgB,IAAI,CAAC;EAEzD,MAAMY,OAAO,GAAGA,CAAA,KAAuB;IACnC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACpC,IAAIL,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEM,SAAS,EAAE;QACnBF,OAAO,CAACJ,MAAM,CAAC,CAAC,CAAC;QACjB;MACJ;MAEA,MAAMO,SAAS,GAAGf,EAAE,CAAC,uBAAuB,CAAC;MAC7CS,SAAS,CAACM,SAAS,CAAC,CAAC,CAAC;;MAEtBA,SAAS,CAACC,EAAE,CAAC,SAAS,EAAE,MAAM;QAC1BC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;QAChCN,OAAO,CAACG,SAAS,CAAC,CAAC,CAAC;MACxB,CAAC,CAAC;MAEFA,SAAS,CAACC,EAAE,CAAC,eAAe,EAAGG,GAAG,IAAK;QACnCF,OAAO,CAACG,KAAK,CAAC,0BAA0B,EAAED,GAAG,CAAC;QAC9CN,MAAM,CAACM,GAAG,CAAC,CAAC,CAAC;MACjB,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EAED,MAAME,IAAI,GAAGA,CAACC,KAAa,EAAEC,IAA6B,EAAEC,QAAkC,KAAK;IAC/F,IAAIhB,MAAM,EAAE;MACRA,MAAM,CAACa,IAAI,CAACC,KAAK,EAAEC,IAAI,EAAEC,QAAQ,CAAC;IACtC,CAAC,MAAM;MACHP,OAAO,CAACG,KAAK,CAAC,uBAAuB,CAAC;IAC1C;EACJ,CAAC;EAED,MAAMK,UAAU,GAAGA,CAAA,KAAM;IACrB,IAAIjB,MAAM,EAAE;MACRA,MAAM,CAACiB,UAAU,CAAC,CAAC;MACnBhB,SAAS,CAAC,IAAI,CAAC;IACnB;EACJ,CAAC;EAEDV,SAAS,CAAC,MAAM;IACZ;IACA,OAAO,MAAM;MACT0B,UAAU,CAAC,CAAC;IAChB,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIvB,OAAA,CAACC,gBAAgB,CAACuB,QAAQ;IAACC,KAAK,EAAE;MAAEnB,MAAM;MAAEE,OAAO;MAAEW,IAAI;MAAEI;IAAW,CAAE;IAAAnB,QAAA,EACnEA;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACc,CAAC;AAEpC,CAAC;AAACxB,EAAA,CApDWF,iBAA0D;AAAA2B,EAAA,GAA1D3B,iBAA0D;AAsDvE,OAAO,MAAM4B,YAAY,GAAGA,CAAA,KAA4B;EAAAC,GAAA;EACpD,MAAMC,OAAO,GAAGtC,UAAU,CAACM,gBAAgB,CAAC;EAC5C,IAAI,CAACgC,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,sDAAsD,CAAC;EAC3E;EACA,OAAOD,OAAO;AAClB,CAAC;AAACD,GAAA,CANWD,YAAY;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}